name: CI Pipeline for API & UI Tests
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      browser:
        description: "Choose browser for UI tests"
        required: true
        default: "firefox"
        type: choice
        options:
          - chrome
          - firefox
          - edge
jobs:
 api-tests:
      name: Build and run API tests
      runs-on: ubuntu-latest
      
      steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore Dependencies
        run: dotnet restore
        
      - name: Build 
        run: dotnet build --no-restore 
        
      - name: Run API Tests
        run: dotnet test --no-build --filter Category=API --logger trx --results-directory TestResults

      - name: Upload API test results
        uses: actions/upload-artifact@v4
        with:
          name: api-test-results
          path: TestResults
 ui-tests:
    name: Build and run UI tests
    runs-on: ubuntu-latest
    needs: api-tests
    if: always()
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
          
      - name: Manually Install Latest Chrome (133)
        run: |
          wget -q -O google-chrome.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo dpkg -i google-chrome.deb || sudo apt-get -f install -y
          rm google-chrome.deb

      - name: Verify Chrome Version
        run: google-chrome --version

      - name: Install Firefox
        if: ${{ github.event.inputs.browser == 'firefox' }}
        uses: browser-actions/setup-firefox@latest

      - name: Install EdgeDriver
        if: ${{ github.event.inputs.browser == 'edge' }}
        uses: browser-actions/setup-edge@latest

      - name: Restore Dependencies
        run: dotnet restore
        working-directory: ./Tests

      - name: Build 
        run: dotnet build --no-restore 
        working-directory: ./Tests
        
      - name: Ensure screenshot directory exists
        run: mkdir -p ./Tests/screenshot

      - name: Set correct permissions
        run: |
          chmod -R 755 ./Tests/bin
          chmod -R 755 ./Tests/obj

      - name: Install SonarScanner tool
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Build and analyze with SonarCloud
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner begin /k:"NikolaNovosel_TestAutomationFramework" /d:sonar.login=$SONAR_TOKEN
          dotnet build --no-restore
          dotnet test --no-restore
          dotnet sonarscanner end /d:sonar.login=$SONAR_TOKEN
          
      - name: Upload UI Test Results
        uses: actions/upload-artifact@v4
        with:
          name: ui-test-results
          path: "**/TestResults/*"

      - name: Upload UI Test Screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ui-test-screenshots
          path: ./Tests/screenshot
